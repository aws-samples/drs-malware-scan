import { Stack, StackProps, RemovalPolicy, Duration } from "aws-cdk-lib";
import { Construct } from "constructs";
import { Function, Runtime, Code, LayerVersion } from "aws-cdk-lib/aws-lambda";
import { Table, AttributeType, BillingMode, ProjectionType } from "aws-cdk-lib/aws-dynamodb";
import { Role, ServicePrincipal, ManagedPolicy, PolicyStatement} from "aws-cdk-lib/aws-iam";
import { Rule, Schedule, RuleTargetInput, EventPattern} from "aws-cdk-lib/aws-events";
import { LambdaFunction } from "aws-cdk-lib/aws-events-targets";
import * as path from "path";

export class DrsMalwareScanStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    //  DynamoDB Table for SecurityHub Findings
    const annotationsTable = new Table(this, "AnnotationsDDBTable", {
      partitionKey: { name: "scan_id", type: AttributeType.STRING },
      sortKey: { name: "ebs_volume_id", type: AttributeType.STRING },
      removalPolicy: RemovalPolicy.DESTROY,
      billingMode: BillingMode.PAY_PER_REQUEST,
      pointInTimeRecovery: false
    });
    
    // add global secondary index to Annotations Table
    annotationsTable.addGlobalSecondaryIndex({
      indexName: 'reverseIndex',
      partitionKey: {name: 'ebs_volume_id', type: AttributeType.STRING},
      sortKey: {name: 'scan_id', type: AttributeType.STRING},
      projectionType: ProjectionType.ALL,
    });

    //  DynamoDB Table for Servernames to be scanned
    const serversTable = new Table(this, "ServersDDBTable", {
      partitionKey: { name: "server_name", type: AttributeType.STRING },
      removalPolicy: RemovalPolicy.DESTROY,
    });

    // Create Lambda Layer
    const boto3Layer = new LayerVersion(this, "Boto3", {
      compatibleRuntimes: [Runtime.PYTHON_3_9],
      code: Code.fromAsset(
        path.join(__dirname, "/../resources/lambda/layers/boto3"),
        {
          bundling: {
            image: Runtime.PYTHON_3_9.bundlingImage,
            command: [
              "bash",
              "-c",
              "pip install boto3==1.28.14 -t /asset-output/python && cp -au . /asset-output/python",
            ],
          },
        }
      ),
    });

    // AWS Lambda for Malware Scan
    const malwareScanLambdaIamRole = new Role(this, "MalwareScanRole", {
      assumedBy: new ServicePrincipal("lambda.amazonaws.com"),
    });

    malwareScanLambdaIamRole.addManagedPolicy(
      ManagedPolicy.fromAwsManagedPolicyName(
        "service-role/AWSLambdaBasicExecutionRole"
      )
    );
    malwareScanLambdaIamRole.addManagedPolicy(
      ManagedPolicy.fromAwsManagedPolicyName("AmazonEC2ReadOnlyAccess")
    );

    malwareScanLambdaIamRole.addToPolicy;
    malwareScanLambdaIamRole.addToPolicy(
      new PolicyStatement({
        resources: ["*"],
        actions: [
          "drs:DescribeSourceServers",
          "drs:DescribeRecoverySnapshots",
          "iam:GetRole",
          "guardduty:StartMalwareScan",
        ],
      })
    );

    malwareScanLambdaIamRole.addToPolicy(
      new PolicyStatement({
        actions: ["dynamodb:PutItem"],
        resources: [annotationsTable.tableArn],
      })
    );
    malwareScanLambdaIamRole.addToPolicy(
      new PolicyStatement({
        actions: ["dynamodb:Scan"],
        resources: [serversTable.tableArn],
      })
    );

    const malwareScanLambda = new Function(this, "MalwareScan", {
      runtime: Runtime.PYTHON_3_9,
      memorySize: 256,
      timeout: Duration.seconds(90),
      handler: "lambda_function.lambda_handler",
      reservedConcurrentExecutions: 10,
      code: Code.fromAsset(
        path.join(__dirname, "/../resources/lambda/malware")
      ),
      role: malwareScanLambdaIamRole,
      layers: [boto3Layer],
      environment: {
        ANNOTATIONS_TABLE: annotationsTable.tableName,
        SERVERS_TABLE: serversTable.tableName,
      },
    });

    // Create Lambda for SecurityHub Annotations
    const annotationsLambdaIamRole = new Role(this, "MalwareAnnotationRole", {
      assumedBy: new ServicePrincipal("lambda.amazonaws.com"),
    });

    annotationsLambdaIamRole.addManagedPolicy(
      ManagedPolicy.fromAwsManagedPolicyName(
        "service-role/AWSLambdaBasicExecutionRole"
      )
    );

    annotationsLambdaIamRole.addToPolicy;
    annotationsLambdaIamRole.addToPolicy(
      new PolicyStatement({
        resources: ["*"],
        actions: ["securityhub:BatchUpdateFindings"],
      })
    );

    annotationsLambdaIamRole.addToPolicy(
      new PolicyStatement({
        actions: ["dynamodb:UpdateItem",
                  "dynamodb:GetItem",
                  "dynamodb:Query"],
        resources: [annotationsTable.tableArn],
      })
    );

    const annotationsLambda = new Function(this, "MalwareAnnotation", {
      runtime: Runtime.PYTHON_3_9,
      memorySize: 256,
      timeout: Duration.seconds(30),
      handler: "lambda_function.lambda_handler",
      reservedConcurrentExecutions: 10,
      code: Code.fromAsset(
        path.join(__dirname, "/../resources/lambda/annotations")
      ),
      role: annotationsLambdaIamRole,
      layers: [boto3Layer],
      environment: {
        ANNOTATIONS_TABLE: annotationsTable.tableName,
      },
    });

    // Create EventBridge Scheduler
    const scheduleRule = new Rule(this, "ScheduleRule", {
      schedule: Schedule.cron({ minute: "0", hour: "4" }),
      description:
        "DRS malware scan configuration stub. Disabled by default to let the administrator setup as needed.",
      targets: [new LambdaFunction(malwareScanLambda)],
      enabled: false,
    });

    // Create EvenBridge Rule
    const annotationsRule = new Rule(this, "AnnotationsRule", {
      eventPattern: {
        detailType: ["Security Hub Findings - Imported"],
        source: ["aws.securityhub"],
        detail: {
          findings: {
            ProductFields: {
              "aws/guardduty/service/ebsVolumeScanDetails/scanId": [
                {
                  exists: true,
                },
              ],
            },
            Note: {
              Text: [
                {
                  exists: false,
                },
              ],
            },
          },
        },
      },
      description:
        "Event rule for the DRS malware scan. Used to detect SecurityHub fingings and enrich/annotate as needed.",
      targets: [new LambdaFunction(annotationsLambda)],
    });
  }
}

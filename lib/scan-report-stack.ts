import { Stack, StackProps, RemovalPolicy, Duration } from "aws-cdk-lib";
import { Construct } from "constructs";
import { Function, Runtime, Code, LayerVersion, EventSourceMapping, Architecture } from "aws-cdk-lib/aws-lambda";
import { Table } from "aws-cdk-lib/aws-dynamodb";
import { Role, ServicePrincipal, ManagedPolicy, PolicyStatement } from "aws-cdk-lib/aws-iam";
import { Rule, Schedule } from "aws-cdk-lib/aws-events";
import { LambdaFunction } from "aws-cdk-lib/aws-events-targets";
import { Bucket, BucketEncryption, BlockPublicAccess } from 'aws-cdk-lib/aws-s3';
import * as path from "path";

interface DrsMalwareScanStackProps extends StackProps {
    drsHelperPolicy: PolicyStatement;
    drsVolumeAnnotationsTable: Table;
    drsHelperLayer: LayerVersion;
};

export class ScanReportStack extends Stack {
  constructor(scope: Construct, id: string, props: DrsMalwareScanStackProps) {
    super(scope, id, props);

    // Create Bucket S3
    const scanReportS3Bucket = new Bucket(this, 'ScanReportBucket', {
      blockPublicAccess: BlockPublicAccess.BLOCK_ALL,
      encryption: BucketEncryption.S3_MANAGED,
      versioned: false,
      removalPolicy: RemovalPolicy.DESTROY
    });
    
    // Lambda Role for processOrders
    const scanReportLambdaIamRole = new Role(this, "ScanReportRole", {
      assumedBy: new ServicePrincipal("lambda.amazonaws.com"),
      managedPolicies: [
        ManagedPolicy.fromAwsManagedPolicyName(
          "service-role/AWSLambdaBasicExecutionRole",
        )
      ],
    });
    
    scanReportLambdaIamRole.addToPolicy(props.drsHelperPolicy);

    scanReportLambdaIamRole.addToPolicy(
      new PolicyStatement({
        actions: ["s3:ListBucket"],
        resources: [ scanReportS3Bucket.bucketArn ],
      }),
    );
    
    scanReportLambdaIamRole.addToPolicy(
      new PolicyStatement({
        actions: ["s3:*Object"],
        resources: [ `${scanReportS3Bucket.bucketArn}/*`],
      }),
    );

    scanReportLambdaIamRole.addToPolicy(
      new PolicyStatement({
        actions: ["dynamodb:Scan"],
        resources: [props.drsVolumeAnnotationsTable.tableArn],
      }),
    );

    // AWS Lambda function

    const scanReportLambda = new Function(this, "ScanReport", {
      runtime: Runtime.PYTHON_3_11,
      memorySize: 128,
      timeout: Duration.seconds(120),
      architecture: Architecture.ARM_64,
      description:
        "Write Scan Report on S3 bucket",
      handler: "lambda_function.lambda_handler",
      code: Code.fromAsset(
        path.join(__dirname, "/../resources/lambda/ScanReport"),
      ),
      role: scanReportLambdaIamRole,
      layers: [props.drsHelperLayer],
      environment: {
        DDB_DRS_VOLUME_ANNOTATIONS: props.drsVolumeAnnotationsTable.tableName,
        S3_BUCKET_NAME: scanReportS3Bucket.bucketName,
        S3_BUCKET_KEY: "scan-reports.csv",
      },
    });

    // Create EventBridge Scheduler
    const scheduleScanReportRule = new Rule(this, "ScanReportRule", {
      schedule: Schedule.cron({ minute: "0", hour: "4" }),
      description:
        "DRS malware scan Report. Disabled by default to let the administrator setup as needed.",
      targets: [new LambdaFunction(scanReportLambda)],
      enabled: false,
    });

  }
}

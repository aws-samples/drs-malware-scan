import os
import json

import time
import boto3
import botocore
from boto3.dynamodb.conditions import Key

def lambda_handler(events, context):
    """
    Annotate SecurityHub findings coming from GuardDuty Malware Scan. We want to agument findings generated from the replicating
    DRS instances by annotating the DRS source server name. This function is meant to be triggered by the SecurityHubEventsRule.

    The function receives a JSON object containing a list of findings, filtering out those that are not related to the scanning
    of EBS volumes. Findings generated by GuardDuty Malware Scan of EBS volumes are checked against the annotations table, which
    is populated at malware scan time. Then, the function generates a Note containing the DRS source server name(s) related to the 
    malware scan finding(s) in order to hint the user about the true source of the finding.
    """

    # print('events: {}'.format(str(events)))
    # print('context: {}'.format(str(context)))

    # print('boto3 version: {}'.format(boto3.__version__))
    # print('botocore version: {}'.format(botocore.__version__))

    ddb_client = None
    securityhub_client = None
    findings = events['detail']['findings']
    
    for finding in findings:
        product_arn = finding['ProductArn']
        product_fields = finding['ProductFields']
        scan_id_path = 'aws/guardduty/service/ebsVolumeScanDetails/scanId'
        
        ebs_volumes = {}
        annotations = None
        error_flag = False
        drs_source_servers_dict = {}
        
        if (product_arn != 'arn:aws:securityhub:us-east-1::product/aws/guardduty'):
            continue

        if (scan_id_path not in product_fields):
            continue

        scan_id = product_fields[scan_id_path]
        resource_id = events['resources'][findings.index(finding)]
        guardduty_finding_id = finding['Id']
        
        # print('debug: scan id: {}'.format(scan_id))
        # print('debug: resource id: {}'.format(resource_id))
        # print('debug: guardduty finding id: {}'.format(guardduty_finding_id))
        
        for threat in finding['Threats']:
            for filepath in threat['FilePaths']:
                ebs_volume_arn = filepath['ResourceId']
                if (ebs_volume_arn in ebs_volumes):
                    continue
                
                ebs_volumes[ebs_volume_arn] = 1
                ebs_volume_id = ebs_volume_arn.rsplit('/', 1)[-1]
                
                # Connect to DynamoDB once.
                if (ddb_client is None):
                    table_name = os.environ.get('ANNOTATIONS_TABLE')
                    ddb_client = boto3.resource('dynamodb')
                    annotations = ddb_client.Table(table_name)
                
                # print('debug: ebs_volume_id {} scan_id {}'.format(
                #     ebs_volume_id,
                #     scan_id,
                # ))
                
                # Query the annotations table using the reverse index. At malware scan time, the MalwareScan lambda generates
                # one annotation for each EBS volume as reported by the DRS API. This means that, for every DRS source server
                # configured for malware scan, there will exist one or more annotations indexed by (scan_id, ebs_volume_id), 
                # where ebs_volume_id is the id of the replicating EBS volume connected to the DRS instance.
                drs_context = annotations.query(
                    KeyConditionExpression = Key('ebs_volume_id').eq(ebs_volume_id) & Key('scan_id').eq(scan_id)
                )
                
                if ('Items' not in drs_context):
                    # No Items reported by the query (not even an empty Items array). Treat this as an error.
                    print('error: cannot annotate malware scan id {}: no DRS context in annotations table.'.format(
                        scan_id
                    ))
                    error_flag = True
                    continue

                if (len(drs_context['Items']) == 0):
                    # No annotations found for this EBS volume and scan id operation. This can happen when the replicating DRS
                    # instance is mapped to unmanaged DRS source serverrs, i.e., servers which are not explicitly configured for
                    # malware scan detection.
                    print(('info: no annotations found for ebs_volume {} scan_id {}. This can happen when the replicating ' +
                           'DRS instance is associated to an unmanaged server which is not explicitly listed for malware ' +
                           'scan. Please investigate which server is related to this EBS volume.').format(
                        ebs_volume_id,
                        scan_id,
                    ))
                    drs_source_servers_dict['one or more server(s) unmanaged by the malware scan solution'] = 1
                    continue
                
                if (len(drs_context['Items']) != 1):
                    # Multiple annotations found. This should never happen, so we treat is as an error.
                    print('error: cannot annotate malware scan id {}: multiple annotations found for ebs_volume {}.'.format(
                        scan_id,
                        ebs_volume_id,
                    ))
                    error_flag = True
                    continue
                
                annotation = drs_context['Items'][0]
                # print('debug: retrieved malware scan annotation: {}'.format(annotation))
                
                # Avoid annotating the same DRS source server multiple times in SecurityHub.
                if (annotation['drs_source_server'] in drs_source_servers_dict):
                    continue
                drs_source_servers_dict[annotation['drs_source_server']] = 1
        
        drs_source_servers_list = list(drs_source_servers_dict.keys())
        if (len(drs_source_servers_list) < 1):
            # No DRS servers found (managed or not by the malware scan solution). Report it as an error.
            error_flag = True
        
        drs_source_servers_text = ', '.join(drs_source_servers_list)
        # print('debug: DRS source server(s) {}'.format(drs_source_servers_text))
        
        if (securityhub_client is None):
            securityhub_client = boto3.client('securityhub')
        
        if (error_flag == True):
            drs_source_servers_text = 'An unexpected error while retrieving annotations. Please report this error.'
        
        if (drs_source_servers_text == ''):
            drs_source_servers_text = 'No annotations made. Please report this error.'
        
        response = securityhub_client.batch_update_findings(
            FindingIdentifiers=[{
                'Id': guardduty_finding_id,
                'ProductArn': product_arn,
            }],
            Note = {
                'Text': drs_source_servers_text,
                'UpdatedBy': 'DRS Source Servers',
            }
        )

        print('info: updated SecurityHub finding id {} set DRS source Server(s) to: {}.'.format(
            guardduty_finding_id,
            drs_source_servers_text,
        ))

    return {
        'statusCode': 200,
    }
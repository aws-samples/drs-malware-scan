import os
import json
import boto3
import csv

from datetime import datetime
from DRSHelper import DRSHelper

drs_helper = DRSHelper()

def lambda_handler(events, context):
    """
    TBD
    """

    # print('events: {}'.format(str(events)))
    # print('context: {}'.format(str(context)))

    # print('boto3 version: {}'.format(boto3.__version__))
    # print('botocore version: {}'.format(botocore.__version__))
    
    try:
        scan_operations = get_scan_operations()
        put_scan_operations(scan_operations)
        
        print('info: summary: {} malware scan operation records exported to {}.'.format(
            len(scan_operations),
            get_s3_pathname(),
        ))
    except Exception as ex:
        raise ex

    return {
        'statusCode': 200,
    }

def get_scan_operations():
    """
    TBD
    """
    
    # Initialize.
    scan_operations = []
    
    response = drs_helper.ddb_client().scan(
        TableName = os.environ.get('DDB_DRS_VOLUME_ANNOTATIONS'),
    )
    
    for item in response['Items']:
        if ('skip_reason' in item):
            skip_reason = item['skip_reason']['S']
        else:
            skip_reason = 'n/a'
        
        scan_time_8601 = datetime.fromtimestamp(
            int(item['scan_time_start']['N'])
        ).isoformat()

        scan_operation = {
            'scan_time_unix': int(item['scan_time_start']['N']),
            'scan_time_8601': scan_time_8601,
            'scan_id': item['scan_id']['S'],
            'scan_result': item['scan_result']['S'],
            'scan_step': item['scan_step']['S'],
            'skip_reason': skip_reason,
            'ebs_volume_id': item['ebs_volume_id']['S'],
            'drs_source_server': item['drs_source_server']['S'],
            'drs_source_server_id': item['drs_source_server_id']['S'],
        }
        
        scan_operations.append(scan_operation)
    
    return sorted(scan_operations, key = lambda d: d['scan_time_unix'], reverse=True)

def put_scan_operations(scan_operations):
    file_name = '/tmp/out.csv'
    bucket_name = os.environ.get('S3_BUCKET_NAME')
    bucket_key = os.environ.get('S3_BUCKET_KEY')
    
    with open(file_name, 'w') as out:
        writer = csv.DictWriter(out, fieldnames = scan_operations[0].keys())
        writer.writeheader()
        for scan_operation in scan_operations:
            writer.writerow(scan_operation)
    out.close()
    
    s3_client = boto3.client('s3')
    s3_client.upload_file(file_name, bucket_name, bucket_key)

def get_s3_pathname():
    return 's3://{}/{}'.format(
        os.environ.get('S3_BUCKET_NAME'),
        os.environ.get('S3_BUCKET_KEY'),
    )


if (__name__ == "__main__"):
    with open("/dev/stdin") as file:
        events = json.load(file)
    lambda_handler(events, '')
